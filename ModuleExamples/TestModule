module TestModule


-- Si descomentamos alguno de los dos, producimos imports ciclicos.
--import TestModule1
--import TestModule2

-- Esta es la función que de momento chequea bien como derivación.
let fun Hola : Int :-> Int
Hola x = 0
deriving from otroteorema

-- Acá esta la especificación de la función de arriba.
let spec Hola x = 0

-- Este esta es la prueba de la derivación.
begin proof otroteorema [ hh:Hola%(x)=0 ]
Hola%(x)
= { hh }
0
end proof


{- Esto es para mostrar que tenemos comentarios en bloque


Y que podemos comentar funciones y esas cosas

let fun Hola x = 1


-}

let val y = 1





-- jijie

let fun F x y z r k = 0
deriving from teorema

let spec F x = y + 1


begin proof teorema
        [] ++ (ys ++ zs)
        = { Neutro a izquierda de concatenación }
        ys ++ zs
        = { Neutro a izquierda de concatenación }
        ([] ++ ys) ++ zs
end proof

let prop nombredelaprop x

begin proof otraCosaLoca induction in n for n + 0 .=. n where
basic
0 -> 0 + 0
     = { Neutro a izquierda de la suma }
     0
induction succ n with hypind -> succ n + 0
                                = { Evaluar suma }
                                succ (n + 0)
                                = { hypind }
                                succ n
end proof

begin proof asds
        False
        ≡ { Definición de False }
        ¬ True
end proof
