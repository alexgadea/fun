module TestModule

import Otrooo

let fun Hola : Int :-> Int
Hola x = 0
deriving from otroteorema


let val y = 1

let spec Hola x = y

begin proof otroteorema
0 + 0
= { Neutro a izquierda de la suma }
0
end proof

let fun F : Int :-> Int
F x = 0
deriving from teorema

let spec F x = y + 1


begin proof teorema
        [] ++ (ys ++ zs)
        = { Neutro a izquierda de concatenación }
        ys ++ zs
        = { Neutro a izquierda de concatenación }
        ([] ++ ys) ++ zs
end proof

let prop nombredelaprop x

begin proof otraCosaLoca induction in n for n + 0 .=. n where
basic
0 -> 0 + 0
     = { Neutro a izquierda de la suma }
     0
induction succ n with hypind -> succ n + 0
                                = { Evaluar suma }
                                succ (n + 0)
                                = { hypind }
                                succ n
end proof

begin proof asds
        False
        ≡ { Definición de False }
        ¬ True
end proof
